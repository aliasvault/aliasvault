@page "/emails"
@using System.Net
@using System.Text
@using System.Text.Json
@using AliasVault.Client.Main.Pages.Emails.Models
@using AliasVault.Shared.Models.Spamok
@using AliasVault.Shared.Models.WebApi
@using AliasVault.Shared.Models.WebApi.Email
@using AliasVault.Client.Main.Components
@using AliasVault.Client.Main.Services
@inherits MainBase
@inject HttpClient HttpClient
@inject ILogger<Home> Logger
@inject MinDurationLoadingService LoadingService

<LayoutPageTitle>Emails</LayoutPageTitle>

@if (EmailModalVisible)
{
    <EmailModal Email="EmailModalEmail" IsSpamOk="false" OnClose="CloseEmailModal" OnEmailDeleted="RefreshData" />
}

<PageHeader
    BreadcrumbItems="@BreadcrumbItems"
    Title="Emails"
    Description="You can view all emails received by your private email addresses below.">
    <CustomActions>
        <RefreshButton OnClick="RefreshData" ButtonText="Refresh" />
    </CustomActions>
</PageHeader>

@if (IsLoading)
{
    <div class="overflow-x-auto px-4">
        <div class="bg-white border rounded-lg dark:bg-gray-800 dark:border-gray-700 overflow-hidden mt-6">
            <ul class="divide-y divide-gray-200 dark:divide-gray-600">
                @for (int i = 0; i < 5; i++)
            {
                <EmailRowSkeleton />
            }
            </ul>
        </div>
    </div>
}
else if (NoEmailClaims)
{
    <div class="p-4 mx-4 mt-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 dark:bg-gray-800">
        <div class="px-4 py-2 text-gray-400 rounded">
            <p class="text-gray-500 dark:text-gray-400">You are not using any private email addresses (yet). Create a new alias and use a private email address supported by AliasVault. All emails received by these private email addresses will show up here.</p>
        </div>
    </div>
}
else
{
    <div class="overflow-x-auto px-4">
        <Paginator CurrentPage="CurrentPage" PageSize="PageSize" TotalRecords="TotalRecords" OnPageChanged="HandlePageChanged"/>

        <div class="bg-white border rounded-lg dark:bg-gray-800 dark:border-gray-700 overflow-hidden mt-6">
            <ul class="divide-y divide-gray-200 dark:divide-gray-600">
                @if (EmailList.Count == 0)
                {
                    <li class="p-4 text-center text-gray-500 dark:text-gray-300">
                        No emails have been received yet.
                    </li>
                }
                else
                {
                    @foreach (var email in EmailList)
                    {
                        <EmailRow
                            Email="email"
                            OnEmailClick="ShowAliasVaultEmailInModal"
                            OnCredentialClick="NavigateToCredential" />
                    }
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<MailListViewModel> EmailList { get; set; } = [];
    private bool IsLoading => LoadingService.IsLoading("emails");
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 50;
    private int TotalRecords { get; set; }
    private bool EmailModalVisible { get; set; }
    private bool NoEmailClaims { get; set; }
    private EmailApiModel EmailModalEmail { get; set; } = new();

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await RefreshData();
        }
    }

    private void HandlePageChanged(int newPage)
    {
        CurrentPage = newPage;
        _ = RefreshData();
    }

    private async Task RefreshData()
    {
        LoadingService.StartLoading("emails", 500, StateHasChanged);
        NoEmailClaims = false;
        CloseEmailModal();

        var emailClaimList = await DbService.GetEmailClaimListAsync();

        if (emailClaimList.Count == 0)
        {
            LoadingService.FinishLoading("emails", StateHasChanged);
            NoEmailClaims = true;
            return;
        }

        var requestModel = new MailboxBulkRequest
        {
            Page = CurrentPage,
            PageSize = PageSize,
            Addresses = emailClaimList,
        };

        var request = new HttpRequestMessage(HttpMethod.Post, $"v1/EmailBox/bulk");
        request.Content = new StringContent(JsonSerializer.Serialize(requestModel), Encoding.UTF8, "application/json");

        try
        {
            var response = await HttpClient.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var mailbox = await response.Content.ReadFromJsonAsync<MailboxBulkResponse>();
                await UpdateMailboxEmails(mailbox);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResponse = JsonSerializer.Deserialize<ApiErrorResponse>(errorContent);
                switch (response.StatusCode)
                {
                    case HttpStatusCode.BadRequest:
                        if (errorResponse != null)
                        {
                            switch (errorResponse.Code)
                            {
                                case "CLAIM_DOES_NOT_EXIST":
                                    GlobalNotificationService.AddErrorMessage("An error occurred while trying to load the emails. Please try to edit and " +
                                                                              "save any credential entry to synchronize the database, then try again.", true);
                                    break;
                                default:
                                    throw new ArgumentException(errorResponse.Message);
                            }
                        }

                        break;
                    case HttpStatusCode.Unauthorized:
                        throw new UnauthorizedAccessException(errorResponse?.Message);
                    default:
                        throw new WebException(errorResponse?.Message);
                }
            }
        }
        catch (Exception ex)
        {
           GlobalNotificationService.AddErrorMessage(ex.Message, true);
           Logger.LogError(ex, "An error occurred while refreshing data");
        }

        LoadingService.FinishLoading("emails", StateHasChanged);
    }

    /// <summary>
    /// Update the local mailbox emails.
    /// </summary>
    private async Task UpdateMailboxEmails(MailboxBulkResponse? model)
    {
        if (model == null)
        {
            EmailList = [];
            TotalRecords = 0;
            return;
        }

        var context = await DbService.GetDbContextAsync();

        // Fetch all credentials in a single query and create a lookup dictionary
        var credentialLookup = await context.Credentials
            .Include(x => x.Service)
            .Include(x => x.Alias)
            .Where(x => x.Alias.Email != null)
            .GroupBy(x => x.Alias.Email!.ToLower())
            .ToDictionaryAsync(
                g => g.Key,
                g => new { Id = g.First().Id, ServiceName = g.First().Service.Name ?? "Unknown" }
            );

        // Convert the email list to view models and add credential info in a single pass
        var decryptedEmailList = await EmailService.DecryptEmailList(model.Mails);
        EmailList = decryptedEmailList.Select(email =>
        {
            var toEmail = email.ToLocal + "@" + email.ToDomain;
            var credentialInfo = credentialLookup.TryGetValue(toEmail.ToLower(), out var info)
                ? info
                : new { Id = Guid.Empty, ServiceName = "Unknown" };

            return new MailListViewModel
            {
                Id = email.Id,
                Date = email.DateSystem,
                FromName = email.FromDisplay,
                FromEmail = email.FromLocal + "@" + email.FromDomain,
                ToEmail = toEmail,
                Subject = email.Subject,
                MessagePreview = email.MessagePreview,
                CredentialId = credentialInfo.Id,
                CredentialName = credentialInfo.ServiceName,
                HasAttachments = email.HasAttachments,
            };
        }).ToList();

        CurrentPage = model.CurrentPage;
        PageSize = model.PageSize;
        TotalRecords = model.TotalRecords;
    }

    /// <summary>
    /// Load recent emails from AliasVault.
    /// </summary>
    private async Task ShowAliasVaultEmailInModal(int emailId)
    {
        EmailApiModel? mail = await HttpClient.GetFromJsonAsync<EmailApiModel>($"v1/Email/{emailId}");
        if (mail != null)
        {
            // Decrypt the email content locally.
            var context = await DbService.GetDbContextAsync();
            var privateKey = await context.EncryptionKeys.FirstOrDefaultAsync(x => x.PublicKey == mail.EncryptionKey);
            if (privateKey is not null)
            {
                mail = await EmailService.DecryptEmail(mail);
            }

            EmailModalEmail = mail;
            EmailModalVisible = true;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Close the email modal.
    /// </summary>
    private void CloseEmailModal()
    {
        EmailModalVisible = false;
        StateHasChanged();
    }

    /// <summary>
    /// Navigate to the credential page.
    /// </summary>
    private void NavigateToCredential(Guid credentialId)
    {
        NavigationManager.NavigateTo($"/credentials/{credentialId}");
    }
}
