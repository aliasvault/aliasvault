@page "/settings/security"
@using AliasVault.Client.Main.Pages.Settings.Security.Components
@inherits MainBase
@using Microsoft.Extensions.Localization

<LayoutPageTitle>@_pageTitle</LayoutPageTitle>

<PageHeader
    BreadcrumbItems="@BreadcrumbItems"
    Title="@_pageTitle"
    Description="@_pageDescription">
    <CustomActions>
        <RefreshButton OnClick="LoadData" ButtonText="@_refreshButton" />
    </CustomActions>
</PageHeader>

<PasswordChangeSection OnStatusChanged="LoadData" />
<TwoFactorAuthenticationSection @ref="TwoFactorSection" OnStatusChanged="LoadData" />
<QuickVaultUnlockSection @ref="QuickVaultUnlockSection" OnStatusChanged="LoadData" />
<ActiveSessionsSection @ref="SessionsSection" OnSessionsChanged="LoadData" />
<RecentAuthLogsSection @ref="RecentAuthLogsSection" OnSessionsChanged="LoadData" />
<DeleteAccountSection />

@code {
    private IStringLocalizer Localizer => LocalizerFactory.Create("Pages.Main.Settings.Security.Security", "AliasVault.Client");

    // Cached localized strings for performance
    private string _pageTitle = string.Empty;
    private string _pageDescription = string.Empty;
    private string _refreshButton = string.Empty;
    private string _breadcrumbTitle = string.Empty;
    private TwoFactorAuthenticationSection? TwoFactorSection;
    private QuickVaultUnlockSection? QuickVaultUnlockSection;
    private ActiveSessionsSection? SessionsSection;
    private RecentAuthLogsSection? RecentAuthLogsSection;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Cache localized strings for performance
        _pageTitle = Localizer["PageTitle"];
        _pageDescription = Localizer["PageDescription"];
        _refreshButton = Localizer["RefreshButton"];
        _breadcrumbTitle = Localizer["BreadcrumbTitle"];

        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = _breadcrumbTitle });
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadData();
        }
    }

    /// <summary>
    /// Loads data for both the Two-Factor Authentication and Active Sessions sections concurrently.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task LoadData()
    {
        await Task.WhenAll(
            TwoFactorSection!.LoadData(),
            QuickVaultUnlockSection!.LoadData(),
            SessionsSection!.LoadData(),
            RecentAuthLogsSection!.LoadData()
        );
    }
}
