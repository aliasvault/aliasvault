@page "/settings/apps"
@inherits MainBase
@inject IJSRuntime JsRuntime
@inject ILogger<Apps> Logger
@using AliasVault.Shared.Core.BrowserExtensions
@using AliasVault.Shared.Core.MobileApps

<LayoutPageTitle>Extensions & Apps</LayoutPageTitle>

<PageHeader
    BreadcrumbItems="@BreadcrumbItems"
    Title="Extensions & Apps"
    Description="Install browser extensions and mobile apps to access your vault from all your devices and automatically fill credentials on websites.">
</PageHeader>

<div class="p-4 mb-4 mx-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
    <div class="mb-6">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Browser Extensions</h3>
        <p class="text-gray-600 dark:text-gray-400">
            The AliasVault browser extension allows you to autofill existing credentials on any website. It also allows you to generate new aliases during registration, access received emails on all of your aliases, and view your aliases and identities.
        </p>
    </div>

    <div class="mb-8">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Browsers</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            @foreach (var extension in Shared.Core.BrowserExtensions.Constants.Extensions
                .Where(x => x.Key != BrowserType.Unknown)
                .Select(x => x.Value))
            {
                <div class="p-4 border rounded-lg dark:border-gray-700">
                    <div class="flex items-center mb-4">
                        <img src="@extension.IconPath" alt="@extension.Name" class="w-8 h-8 mr-3">
                        <h4 class="text-lg font-medium text-gray-900 dark:text-white">@extension.Name</h4>
                    </div>
                    @if (extension.IsAvailable)
                    {
                        <a href="@extension.DownloadUrl"
                           target="_blank"
                           class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-200 dark:focus:ring-primary-900">
                            Install for @extension.Name
                        </a>
                    }
                    else
                    {
                        <span class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-gray-100 rounded-lg dark:text-gray-400 dark:bg-gray-800">
                            Coming soon
                        </span>
                    }
                </div>
            }
        </div>
    </div>

    <div class="mb-6">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Mobile Apps</h3>
        <p class="text-gray-600 dark:text-gray-400">
            The AliasVault mobile app allows you to access your aliases and identities on the go, view and manage received emails, and generate new aliases anytime. Your data is fully protected with on-device biometric authentication.
        </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        @foreach (var app in Shared.Core.MobileApps.Constants.MobileApps)
        {
            <div class="p-4 border rounded-lg dark:border-gray-700">
                <div class="flex items-center mb-4">
                    <img src="@app.IconPath" alt="@app.Name" class="w-8 h-8 mr-3">
                    <h4 class="text-lg font-medium text-gray-900 dark:text-white">@app.Name</h4>
                </div>
                @if (app.IsAvailable)
                {
                    <a href="@app.DownloadUrl"
                       target="_blank"
                       class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-200 dark:focus:ring-primary-900">
                        Download for @app.Name
                    </a>
                }
                else
                {
                    <span class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-gray-100 rounded-lg dark:text-gray-400 dark:bg-gray-800">
                        Coming soon
                    </span>
                }
            </div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// The current browser of the user.
    /// </summary>
    private BrowserType CurrentBrowser { get; set; }

    /// <summary>
    /// Information for extension for the current browser of the user.
    /// </summary>
    private BrowserExtensionInfo? CurrentBrowserExtension { get; set; } = null;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Extensions & Apps" });

        try
        {
            CurrentBrowser = await DetermineBrowser();
            CurrentBrowserExtension = Shared.Core.BrowserExtensions.Constants.Extensions[CurrentBrowser];
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error determining browser type");
        }
    }

    /// <summary>
    /// Determine current browser.
    /// </summary>
    /// <returns>Browser type enum value.</returns>
    private async Task<BrowserType> DetermineBrowser()
    {
        try
        {
            // First check if it's Brave.
            var isBrave = await JsRuntime.InvokeAsync<bool>("eval", "navigator.brave?.isBrave() || false");
            if (isBrave)
            {
                return BrowserType.Brave;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking for Brave browser");
        }

        var userAgent = await JsRuntime.InvokeAsync<string>("eval", "navigator.userAgent");
        return userAgent.ToLower() switch
        {
            var x when x.Contains("firefox") => BrowserType.Firefox,
            var x when x.Contains("chrome") && !x.Contains("edg") => BrowserType.Chrome,
            var x when x.Contains("safari") && !x.Contains("chrome") => BrowserType.Safari,
            var x when x.Contains("edg") => BrowserType.Edge,
            _ => BrowserType.Unknown
        };
    }
}
