@page "/welcome"
@inherits MainBase
@using AliasVault.Shared.Core.BrowserExtensions
@using AliasVault.Shared.Core.MobileApps
@using Microsoft.Extensions.Localization

<div class="bg-gray-100 dark:bg-gray-900 flex flex-col lg:items-center lg:justify-center">
    <div class="w-full mt-4 lg:mt-16 mx-auto lg:max-w-4xl lg:bg-white lg:dark:bg-gray-800 lg:shadow-xl lg:rounded-lg lg:overflow-hidden flex flex-col">
        <div class="flex flex-col flex-grow">
            <div class="flex-grow p-6 pt-4 lg:pt-6 lg:pb-4">
                <div class="flex justify-between items-center mb-4">
                    <div class="flex-grow text-center">
                        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">@GetStepTitle(_currentStep)</h2>
                    </div>
                </div>

                @if (GetProgressPercentage() > 0)
                {
                    <div class="w-full bg-gray-200 rounded-full h-2.5 mb-4 dark:bg-gray-700 mt-4">
                        <div class="bg-primary-600 h-2.5 rounded-full" style="width: @(GetProgressPercentage())%"></div>
                    </div>
                }

                @switch (_currentStep)
                {
                    case TutorialStep.Welcome:
                        <div class="space-y-4">
                            <p class="text-gray-600 dark:text-gray-400">
                                @_welcomeMessage
                            </p>
                        </div>
                        break;

                    case TutorialStep.HowAliasVaultWorks:
                        <div class="space-y-4">
                            <p class="text-gray-600 dark:text-gray-400">
                                @_howItWorksIntro
                            </p>
                            <ol class="list-decimal list-inside space-y-2 text-gray-600 dark:text-gray-400">
                                <li>@_howItWorksStep1</li>
                                <li>@_howItWorksStep2</li>
                                <li>@_howItWorksStep3</li>
                                <li>@_howItWorksStep4</li>
                            </ol>
                        </div>
                        break;

                    case TutorialStep.Tips:
                        <div class="space-y-4">
                            <div class="space-y-3">
                                <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                    <h4 class="font-semibold text-gray-900 dark:text-white">@_masterPasswordTipTitle</h4>
                                    <p class="text-gray-600 dark:text-gray-400">
                                        @_masterPasswordTipContent
                                    </p>
                                </div>
                                <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                    <h4 class="font-semibold text-gray-900 dark:text-white">@_twoFactorTipTitle</h4>
                                    <p class="text-gray-600 dark:text-gray-400">@_twoFactorTipContent</p>
                                </div>
                                <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                    <h4 class="font-semibold text-gray-900 dark:text-white">@_extensionsAppsTipTitle</h4>
                                    <p class="text-gray-600 dark:text-gray-400 mb-4">@_extensionsAppsTipContent</p>
                                    <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3">
                                        @foreach (var extension in AliasVault.Shared.Core.BrowserExtensions.Constants.Extensions.Where(x => x.Key != BrowserType.Unknown).Select(x => x.Value))
                                        {
                                            @if (extension.IsAvailable)
                                            {
                                                <a href="@extension.DownloadUrl"
                                                   target="_blank"
                                                   class="flex flex-col items-center p-3 rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors">
                                                    <img src="@extension.IconPath" alt="@extension.Name" class="w-8 h-8 mb-2">
                                                    <span class="text-xs text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300">
                                                        @extension.Name
                                                    </span>
                                                </a>
                                            }
                                            else
                                            {
                                                <div class="flex flex-col items-center p-3 rounded-lg bg-gray-200 dark:bg-gray-600">
                                                    <img src="@extension.IconPath" alt="@extension.Name" class="w-8 h-8 mb-2 opacity-50">
                                                    <span class="text-xs text-gray-500 dark:text-gray-400">
                                                        @_comingSoonLabel
                                                    </span>
                                                </div>
                                            }
                                        }
                                        @foreach (var app in AliasVault.Shared.Core.MobileApps.Constants.MobileApps)
                                        {
                                            @if (app.IsAvailable)
                                            {
                                                <a href="@app.DownloadUrl"
                                                   target="_blank"
                                                   class="flex flex-col items-center p-3 rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors">
                                                    <img src="@app.IconPath" alt="@app.Name" class="w-8 h-8 mb-2">
                                                    <span class="text-xs text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300">
                                                        @_downloadForPrefix @app.Name
                                                    </span>
                                                </a>
                                            }
                                            else
                                            {
                                                <div class="flex flex-col items-center p-3 rounded-lg bg-gray-200 dark:bg-gray-600">
                                                    <img src="@app.IconPath" alt="@app.Name" class="w-8 h-8 mb-2 opacity-50">
                                                    <span class="text-xs text-gray-500 dark:text-gray-400">
                                                        @app.Name @_soonSuffix
                                                    </span>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        break;

                    case TutorialStep.CreateFirstIdentity:
                        <div class="space-y-4">
                            <h3 class="text-2xl font-bold text-gray-900 dark:text-white">@_readyToStartTitle</h3>
                            <p class="text-gray-600 dark:text-gray-400">
                                @_readyToStartMessage
                            </p>
                            <div class="mt-4">
                                <button @onclick="CreateFirstIdentity"
                                        class="w-full bg-primary-600 hover:bg-primary-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-300">
                                    @_createFirstIdentityButton
                                </button>
                            </div>
                        </div>
                        break;
                }
            </div>

            <div class="fixed lg:relative bottom-0 left-0 right-0 p-4 bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 lg:bg-transparent lg:dark:bg-transparent lg:border-0">
                @if (_currentStep != TutorialStep.Tips)
                {
                    <button @onclick="GoNext"
                            class="w-full py-3 px-4 bg-primary-600 hover:bg-primary-700 text-white font-semibold rounded-lg transition duration-300">
                        @_continueButton
                    </button>
                }
                else
                {
                    <button @onclick="FinishTutorial"
                            class="w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition duration-300">
                        @_getStartedButton
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private IStringLocalizer Localizer => LocalizerFactory.Create("Pages.Main.Welcome", "AliasVault.Client");

    // Cached localized strings for performance
    private string _welcomeStepTitle = string.Empty;
    private string _howAliasVaultWorksStepTitle = string.Empty;
    private string _tipsStepTitle = string.Empty;
    private string _getStartedStepTitle = string.Empty;
    private string _tutorialStepTitle = string.Empty;
    private string _welcomeMessage = string.Empty;
    private string _howItWorksIntro = string.Empty;
    private string _howItWorksStep1 = string.Empty;
    private string _howItWorksStep2 = string.Empty;
    private string _howItWorksStep3 = string.Empty;
    private string _howItWorksStep4 = string.Empty;
    private string _masterPasswordTipTitle = string.Empty;
    private string _masterPasswordTipContent = string.Empty;
    private string _twoFactorTipTitle = string.Empty;
    private string _twoFactorTipContent = string.Empty;
    private string _extensionsAppsTipTitle = string.Empty;
    private string _extensionsAppsTipContent = string.Empty;
    private string _comingSoonLabel = string.Empty;
    private string _downloadForPrefix = string.Empty;
    private string _soonSuffix = string.Empty;
    private string _readyToStartTitle = string.Empty;
    private string _readyToStartMessage = string.Empty;
    private string _createFirstIdentityButton = string.Empty;
    private string _continueButton = string.Empty;
    private string _getStartedButton = string.Empty;
    private string _finishingTutorialMessage = string.Empty;

    private TutorialStep _currentStep = TutorialStep.Welcome;

    private enum TutorialStep
    {
        Welcome,
        HowAliasVaultWorks,
        Tips,
        CreateFirstIdentity
    }

    private string GetStepTitle(TutorialStep step)
    {
        return step switch
        {
            TutorialStep.Welcome => _welcomeStepTitle,
            TutorialStep.HowAliasVaultWorks => _howAliasVaultWorksStepTitle,
            TutorialStep.Tips => _tipsStepTitle,
            TutorialStep.CreateFirstIdentity => _getStartedStepTitle,
            _ => _tutorialStepTitle
        };
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Cache localized strings for performance
        _welcomeStepTitle = Localizer["WelcomeStepTitle"];
        _howAliasVaultWorksStepTitle = Localizer["HowAliasVaultWorksStepTitle"];
        _tipsStepTitle = Localizer["TipsStepTitle"];
        _getStartedStepTitle = Localizer["GetStartedStepTitle"];
        _tutorialStepTitle = Localizer["TutorialStepTitle"];
        _welcomeMessage = Localizer["WelcomeMessage"];
        _howItWorksIntro = Localizer["HowItWorksIntro"];
        _howItWorksStep1 = Localizer["HowItWorksStep1"];
        _howItWorksStep2 = Localizer["HowItWorksStep2"];
        _howItWorksStep3 = Localizer["HowItWorksStep3"];
        _howItWorksStep4 = Localizer["HowItWorksStep4"];
        _masterPasswordTipTitle = Localizer["MasterPasswordTipTitle"];
        _masterPasswordTipContent = Localizer["MasterPasswordTipContent"];
        _twoFactorTipTitle = Localizer["TwoFactorTipTitle"];
        _twoFactorTipContent = Localizer["TwoFactorTipContent"];
        _extensionsAppsTipTitle = Localizer["ExtensionsAppsTipTitle"];
        _extensionsAppsTipContent = Localizer["ExtensionsAppsTipContent"];
        _comingSoonLabel = Localizer["ComingSoonLabel"];
        _downloadForPrefix = Localizer["DownloadForPrefix"];
        _soonSuffix = Localizer["SoonSuffix"];
        _readyToStartTitle = Localizer["ReadyToStartTitle"];
        _readyToStartMessage = Localizer["ReadyToStartMessage"];
        _createFirstIdentityButton = Localizer["CreateFirstIdentityButton"];
        _continueButton = Localizer["ContinueButton"];
        _getStartedButton = Localizer["GetStartedButton"];
        _finishingTutorialMessage = Localizer["FinishingTutorialMessage"];

        // If tutorial is already done, redirect to the home page.
        if (DbService.Settings.TutorialDone)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task GoNext()
    {
        _currentStep = _currentStep switch
        {
            TutorialStep.Welcome => TutorialStep.HowAliasVaultWorks,
            TutorialStep.HowAliasVaultWorks => TutorialStep.Tips,
            TutorialStep.Tips => TutorialStep.CreateFirstIdentity,
            _ => _currentStep
        };

        await JsInteropService.ScrollToTop();
    }

    private void CreateFirstIdentity()
    {
        NavigationManager.NavigateTo("credentials/create");
    }

    private async Task FinishTutorial()
    {
        GlobalLoadingSpinner.Show(_finishingTutorialMessage);
        await DbService.Settings.SetTutorialDoneAsync(true);
        NavigationManager.NavigateTo("credentials");
        GlobalLoadingSpinner.Hide();
    }

    private int GetProgressPercentage()
    {
        return (int)_currentStep * 100 / (Enum.GetValues(typeof(TutorialStep)).Length - 1);
    }
}
