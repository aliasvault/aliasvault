//-----------------------------------------------------------------------
// <copyright file="FilesizeTests.cs" company="lanedirt">
// Copyright (c) lanedirt. All rights reserved.
// Licensed under the AGPLv3 license. See LICENSE.md file in the project root for full license information.
// </copyright>
//-----------------------------------------------------------------------

namespace AliasVault.UnitTests.Vault;

using AliasVault.Api.Helpers;

/// <summary>
/// Tests for the Vault FileSize calculation.
/// </summary>
public class FilesizeTests
{
    /// <summary>
    /// Test the FileSize calculation for small strings.
    /// </summary>
    [Test]
    public void FileSizeSmallTest()
    {
        var smallString = "dGVzdA==";
        Assert.That(FileHelper.Base64StringToKilobytes(smallString), Is.EqualTo(1));
    }

    /// <summary>
    /// Test the FileSize calculation for medium strings.
    /// </summary>
    [Test]
    public void FileSizeMediumTest()
    {
        var mediumString = "TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRG9uZWMgZXUgY29udmFsbGlzIGxvcmVtLCB2ZWwgdGluY2lkdW50IG5pYmguIERvbmVjIGN1cnN1cywgZXJvcyBzZWQgZmVybWVudHVtIGhlbmRyZXJpdCwgZXggbnVsbGEgY3Vyc3VzIGxhY3VzLCBldSBjb21tb2RvIGVyYXQgbGVvIGF0IGV4LiBJbnRlZ2VyIHV0IGR1aSBwaGFyZXRyYSwgc3VzY2lwaXQgbGVjdHVzIHF1aXMsIG1vbGVzdGllIGFyY3UuIFByYWVzZW50IG5pc2wgZW5pbSwgc29kYWxlcyB2ZWwgbHVjdHVzIGluLCBlZ2VzdGFzIGV1IG1hc3NhLiBDcmFzIHZlaGljdWxhIGNvbW1vZG8gZnJpbmdpbGxhLiBTdXNwZW5kaXNzZSBwcmV0aXVtIGZpbmlidXMgcHVydXMgZXUgc2VtcGVyLiBRdWlzcXVlIGFsaXF1YW0gbGVjdHVzIGFyY3UsIGFjIHBvcnRhIG5pYmggY29udmFsbGlzIGRpZ25pc3NpbS4gSW50ZWdlciByaXN1cyBhcmN1LCBtYXR0aXMgZWdldCBjdXJzdXMgc2l0IGFtZXQsIHRpbmNpZHVudCBpbiBqdXN0by4gSW50ZWdlciB0dXJwaXMgdXJuYSwgdml2ZXJyYSB1dCBsb3JlbSBhYywgZ3JhdmlkYSBtYXhpbXVzIG5pc2wuCgpNYWVjZW5hcyB0cmlzdGlxdWUgdGVsbHVzIGV0IGVsZW1lbnR1bSBsYWNpbmlhLiBQZWxsZW50ZXNxdWUgcXVpcyBtYXNzYSBxdWlzIGxlY3R1cyBwaGFyZXRyYSBjb25zZWN0ZXR1ci4gU2VkIGFjY3Vtc2FuIGltcGVyZGlldCBjb25ndWUuIEludGVnZXIgbWF0dGlzIGRvbG9yIHZvbHV0cGF0IG1hdHRpcyByaG9uY3VzLiBQcm9pbiBmYWNpbGlzaXMgZGljdHVtIG9yY2kgZXUgbWF0dGlzLiBEb25lYyBwb3J0YSBub24gcXVhbSBxdWlzIHVsbGFtY29ycGVyLiBNYXVyaXMgYWxpcXVhbSBkaWN0dW0gbWkgbmVjIHBoYXJldHJhLiBRdWlzcXVlIHNlbXBlciByaXN1cyBhbnRlLCB2aXRhZSBhbGlxdWV0IG51bmMgdmVoaWN1bGEgcGVsbGVudGVzcXVlLiBDcmFzIHRlbXBvciBjb25zZXF1YXQgdHVycGlzIG5lYyBwbGFjZXJhdC4gTWF1cmlzIGZyaW5naWxsYSBvZGlvIHNpdCBhbWV0IG1hdXJpcyBlZmZpY2l0dXIgcnV0cnVtLiBNYWVjZW5hcyBhbGlxdWV0IG9yY2kgbmlzaSwgdmVsIHN1c2NpcGl0IGZlbGlzIG1heGltdXMgdml0YWUuIEluIHRpbmNpZHVudCBmZXJtZW50dW0gbGVjdHVzLCBldCBzb2xsaWNpdHVkaW4gdG9ydG9yIG9ybmFyZSB2aXRhZS4KCkFlbmVhbiBmYWNpbGlzaXMgcHJldGl1bSBuZXF1ZSB2YXJpdXMgZWxlaWZlbmQuIERvbmVjIHZlbmVuYXRpcyBlbGl0IG9kaW8sIHZpdGFlIHB1bHZpbmFyIHVybmEgdGVtcG9yIHZpdGFlLiBNb3JiaSBwZWxsZW50ZXNxdWUgbGlndWxhIHRpbmNpZHVudCBkb2xvciB0aW5jaWR1bnQsIGZhdWNpYnVzIGJsYW5kaXQgZW5pbSBmYWNpbGlzaXMuIFNlZCBhYyB1cm5hIHRpbmNpZHVudCwgZmFjaWxpc2lzIHB1cnVzIGFjLCBkYXBpYnVzIG9kaW8uIFV0IG5lYyB2ZXN0aWJ1bHVtIGp1c3RvLCBhIHBlbGxlbnRlc3F1ZSBkdWkuIFBoYXNlbGx1cyBwdWx2aW5hciBmYXVjaWJ1cyBmZWxpcywgZXUgbHVjdHVzIGxlY3R1cyBpYWN1bGlzIHNlZC4gUHJvaW4gbm9uIGx1Y3R1cyBsaWd1bGEsIGV1IGNvbnNlcXVhdCBtYXNzYS4gUHJvaW4gZXQgcGhhcmV0cmEgbGVjdHVzLgoKTWFlY2VuYXMgcmhvbmN1cyB0b3J0b3Igc2l0IGFtZXQgbnVuYyB2aXZlcnJhIHByZXRpdW0uIFBoYXNlbGx1cyBsdWN0dXMgdGluY2lkdW50IGFsaXF1ZXQuIEFsaXF1YW0gZXJhdCB2b2x1dHBhdC4gQWVuZWFuIGZhY2lsaXNpcyBtYXR0aXMgbGVvIGEgdm9sdXRwYXQuIE1hZWNlbmFzIHZlc3RpYnVsdW0gZWxpdCBldSBkdWkgZWdlc3RhcyBwdWx2aW5hci4gQWxpcXVhbSB0aW5jaWR1bnQgbG9ib3J0aXMgdmVsaXQgZXQgZmFjaWxpc2lzLiBRdWlzcXVlIGVsZW1lbnR1bSwgZG9sb3Igdml0YWUgbW9sZXN0aWUgYXVjdG9yLCBudW5jIG1hc3NhIHRlbXBvciBlc3QsIHBvcnRhIGRhcGlidXMgc2VtIHJpc3VzIGEgbnVsbGEuIE1hdXJpcyBldCBhbnRlIHZlbmVuYXRpcywgc2FnaXR0aXMgc2FwaWVuIGV1LCBmZXVnaWF0IGp1c3RvLiBNb3JiaSBwZWxsZW50ZXNxdWUgbG9yZW0gZmVsaXMsIGluIG1vbGxpcyB2ZWxpdCB2ZW5lbmF0aXMgc2VkLiBTdXNwZW5kaXNzZSBlbGl0IHJpc3VzLCBtYXhpbXVzIGV1IHVsbGFtY29ycGVyIGF0LCBtYWxlc3VhZGEgdmVsIGlwc3VtLgoKUGVsbGVudGVzcXVlIGVnZXQgbGVjdHVzIHBlbGxlbnRlc3F1ZSBhdWd1ZSBtb2xlc3RpZSBwaGFyZXRyYSBuZWMgYSBtYXVyaXMuIFF1aXNxdWUgdXQgbmlzbCBzaXQgYW1ldCBvcmNpIHBvcnR0aXRvciBjb25ndWUgYWMgcXVpcyBtZXR1cy4gU2VkIGZpbmlidXMgbmlzaSBuZWMgZ3JhdmlkYSBwZWxsZW50ZXNxdWUuIEFlbmVhbiBhIGZpbmlidXMgbmVxdWUuIFF1aXNxdWUgbWF0dGlzIHNhcGllbiBzYXBpZW4sIHV0IGxhb3JlZXQgb2RpbyBwb3J0YSBzaXQgYW1ldC4gUHJvaW4gbHVjdHVzIHNlbXBlciB0b3J0b3IgcXVpcyBiaWJlbmR1bS4gQ3JhcyBwb3J0dGl0b3IgZmV1Z2lhdCBlbGl0LCBzY2VsZXJpc3F1ZSB2YXJpdXMgbGVjdHVzIGNvbW1vZG8gbm9uLiBWaXZhbXVzIGltcGVyZGlldCBudWxsYSBldSBoZW5kcmVyaXQgZGlnbmlzc2ltLiBFdGlhbSBncmF2aWRhIGVzdCBtYXNzYSwgcG9ydGEgbGFjaW5pYSByaXN1cyBwb3N1ZXJlIGluLiBOdWxsYW0gaWFjdWxpcywgcHVydXMgYWMgcGVsbGVudGVzcXVlIGlhY3VsaXMsIG5pYmggdGVsbHVzIGZldWdpYXQgc2FwaWVuLCB1dCB2ZXN0aWJ1bHVtIHF1YW0gbWFzc2Egdml0YWUgZXN0LiBOdWxsYW0gaWQgbWkgc2VkIGF1Z3VlIGdyYXZpZGEgZmVybWVudHVtLiBRdWlzcXVlIGFjY3Vtc2FuIHNlbSB1dCByaXN1cyB0ZW1wb3IgdWx0cmljZXMuIE5hbSBhdCB0dXJwaXMgdml0YWUgbnVsbGEgaWFjdWxpcyBlZ2VzdGFzLiBOdW5jIGZldWdpYXQgc29kYWxlcyBuaXNpLg==";
        Assert.That(FileHelper.Base64StringToKilobytes(mediumString), Is.EqualTo(3));
    }

    /// <summary>
    /// Test the FileSize calculation for large strings.
    /// </summary>
    [Test]
    public void FileSizeLargeTest()
    {
        var largeString = "";
        Assert.That(FileHelper.Base64StringToKilobytes(largeString), Is.EqualTo(32));
    }
}
