@page "/users/{Id}"
@using AliasVault.Admin.Main.Pages.Users.View.Components
@inherits MainBase

<LayoutPageTitle>User</LayoutPageTitle>

@if (IsLoading || User == null)
{
    <LoadingIndicator/>
}
else
{
    <PageHeader
        BreadcrumbItems="@BreadcrumbItems"
        Title="View user"
        Description="View details of the user below.">
        <CustomActions>
            <RefreshButton OnClick="RefreshData" ButtonText="Refresh" />
            <LinkButton Color="danger" Href="@($"users/{Id}/delete")" Text="Delete user" />
        </CustomActions>
    </PageHeader>

    <div class="grid grid-cols-2 px-4 pt-6 md:grid-cols-3 lg:gap-4 dark:bg-gray-900">
        <div class="col-span-full">
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center xl:block sm:space-x-4 xl:space-x-0 2xl:space-x-4">
                    <div>
                        <h3 class="mb-4 text-2xl font-bold text-gray-900 dark:text-white border-b border-gray-200 pb-2">@User.UserName</h3>

                        <div class="w-full mb-4 overflow-x-auto">
                            <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                                <tbody>
                                    <tr class="border-b dark:border-gray-700">
                                        <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">Id</th>
                                        <td class="px-4 py-3">@User.Id</td>
                                    </tr>
                                    <tr class="border-b dark:border-gray-700">
                                        <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">Registered at</th>
                                        <td class="px-4 py-3">@User.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    </tr>
                                    <tr>
                                        <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">2FA Status</th>
                                        <td class="px-4 py-3">
                                            <div class="flex items-center space-x-2">
                                                <StatusPill Enabled="@User.TwoFactorEnabled"/>
                                                <span class="text-gray-700 dark:text-gray-300">Authenticator key(s) active: @TwoFactorKeysCount</span>
                                                @if (User.TwoFactorEnabled)
                                                {
                                                    <Button Color="danger" OnClick="DisableTwoFactor">Disable 2FA</Button>
                                                }
                                                else
                                                {
                                                    if (TwoFactorKeysCount > 0)
                                                    {
                                                        <Button Color="success" OnClick="EnableTwoFactor">Enable 2FA</Button>
                                                        <Button Color="danger" OnClick="ResetTwoFactor">Remove 2FA keys</Button>
                                                    }
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">Account Status</th>
                                        <td class="px-4 py-3">
                                            <div class="flex items-center space-x-2">
                                                <StatusPill Enabled="@(!User.Blocked)" TextTrue="Active" TextFalse="Blocked" />
                                                <Button Color="@(User.Blocked ? "success" : "danger")" OnClick="ToggleBlockStatus">
                                                    @(User.Blocked ? "Unblock User" : "Block User")
                                                </Button>
                                                <span class="text-sm text-gray-500 dark:text-gray-400">
                                                    <i class="fas fa-info-circle mr-1"></i>
                                                    Blocking a user prevents them from logging in or accessing AliasVault
                                                </span>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center">
                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">Vaults</h3>

                        <VaultTable VaultList="@VaultList" OnMakeCurrent="@MakeCurrentAsync" />
                    </div>
                </div>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center">
                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">UserRefreshTokens (Logged in devices)</h3>

                        <RefreshTokenTable RefreshTokenList="@RefreshTokenList" OnRevokeToken="@RevokeRefreshToken" />
                    </div>
                </div>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center">
                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">Email claims</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">
                            Email claims represent the email addresses that the user has (historically) used. Whenever a user deletes an email alias
                            the claim gets disabled and the server will reject all emails sent to that alias. A user can always re-enable
                            the claim by using it again. Email claims are permanently tied to a user and cannot be transferred to another user.
                        </p>
                        <EmailClaimTable User="@User" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the user ID.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private bool IsLoading { get; set; } = true;
    private AliasVaultUser? User { get; set; } = new();
    private int TwoFactorKeysCount { get; set; }
    private List<AliasVaultUserRefreshToken> RefreshTokenList { get; set; } = [];
    private List<Vault> VaultList { get; set; } = [];

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Users", Url = "/users" });
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "View user" });
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await RefreshData();
        }
    }

    private async Task RefreshData()
    {
        IsLoading = true;
        StateHasChanged();

        // Load the aliases from the webapi via AliasService.
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        User = await dbContext.AliasVaultUsers.FindAsync(Id);

        // Get count of user authenticator tokens.
        TwoFactorKeysCount = await dbContext.UserTokens.CountAsync(x => x.UserId == User!.Id && x.Name == "AuthenticatorKey");

        if (User is null)
        {
            // Error loading user.
            GlobalNotificationService.AddErrorMessage("This user does not exist (anymore). Please try again.");
            NavigationService.RedirectTo("users");
            return;
        }

        // Load all active refresh tokens for this user to show which devices are logged in.
        RefreshTokenList = await dbContext.AliasVaultUserRefreshTokens.Where(x => x.UserId == User.Id).Select(x => new AliasVaultUserRefreshToken()
            {
                Id = x.Id,
                DeviceIdentifier = x.DeviceIdentifier,
                IpAddress = x.IpAddress,
                ExpireDate = x.ExpireDate,
                CreatedAt = x.CreatedAt,
            })
            .Where(x => x.ExpireDate > DateTime.UtcNow)
            .OrderBy(x => x.CreatedAt)
            .ToListAsync();

        // Load all vaults for this user (do not load the actual file content for performance reasons).
        VaultList = await dbContext.Vaults.Where(x => x.UserId == User.Id).Select(x => new Vault
            {
                Id = x.Id,
                Version = x.Version,
                RevisionNumber = x.RevisionNumber,
                FileSize = x.FileSize,
                CreatedAt = x.CreatedAt,
                UpdatedAt = x.UpdatedAt,
                Salt = x.Salt,
                Verifier = x.Verifier,
                VaultBlob = string.Empty,
                EncryptionType = x.EncryptionType,
                EncryptionSettings = x.EncryptionSettings,
                CredentialsCount = x.CredentialsCount,
                EmailClaimsCount = x.EmailClaimsCount,
                Client = x.Client,
            })
            .OrderBy(x => x.UpdatedAt)
            .ToListAsync();

        IsLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// This method will revoke a refresh token for the user which will log out the device.
    /// </summary>
    private async Task RevokeRefreshToken(AliasVaultUserRefreshToken entry)
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var token = await dbContext.AliasVaultUserRefreshTokens.FindAsync(entry.Id);

        if (token != null)
        {
            dbContext.AliasVaultUserRefreshTokens.Remove(token);
            await dbContext.SaveChangesAsync();
            await RefreshData();
        }
    }

    /// <summary>
    /// This method enables two-factor authentication for the user based on existing keys. If no keys are present
    /// then 2FA will not work. The user will need to manually set up a new authenticator device.
    /// </summary>
    private async Task EnableTwoFactor()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        User = await dbContext.AliasVaultUsers.FindAsync(Id);

        if (User != null)
        {
            User.TwoFactorEnabled = true;
            await dbContext.SaveChangesAsync();
            await RefreshData();
        }
    }

    /// <summary>
    /// This method disables two-factor authentication for the user. This will NOT remove the authenticator keys.
    /// This means the admin can re-enable 2FA for the user without the user having to set up a new authenticator
    /// keys.
    /// </summary>
    private async Task DisableTwoFactor()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        User = await dbContext.AliasVaultUsers.FindAsync(Id);

        if (User != null)
        {
            User.TwoFactorEnabled = false;
            await dbContext.SaveChangesAsync();
            await RefreshData();
        }
    }

    /// <summary>
    /// This method resets the two-factor authentication for the user which will remove all authenticator keys. The
    /// next time the user enables two-factor authentication new keys will be generated. When keys are removed it
    /// also means 2FA cannot be re-enabled until the user manually sets up a new authenticator device.
    /// </summary>
    private async Task ResetTwoFactor()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        User = await dbContext.AliasVaultUsers.FindAsync(Id);

        if (User != null)
        {
            // Remove all authenticator keys and recovery codes.
            await dbContext.UserTokens
                .Where(x => x.UserId == User.Id && (x.Name == "AuthenticatorKey" || x.Name == "RecoveryCodes"))
                .ForEachAsync(x => dbContext.UserTokens.Remove(x));

            await dbContext.SaveChangesAsync();
            await RefreshData();
        }
    }

    /// <summary>
    /// Handles the action of making a vault the current one.
    /// </summary>
    /// <param name="vault">The vault to make current.</param>
    private async Task MakeCurrentAsync(Vault vault)
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        if (await ConfirmModalService.ShowConfirmation(
                title: "Confirm Vault Restoration",
                message: @"Are you sure you want to restore this specific vault and make it the active one?

Important notes:
• The next time the user logs in, they will load this vault version.
• If the user has changed their password recently, their password will be reverted to the one associated with this vault.

Do you want to proceed with the restoration?")) {
            // Load vault
            var currentVault = await dbContext.Vaults.FindAsync(vault.Id);
            if (currentVault == null)
            {
                return;
            }

            // Update time to make this the current vault.
            currentVault.RevisionNumber = VaultList.MaxBy(x => x.RevisionNumber)!.RevisionNumber + 1;

            // Save it.
            await dbContext.SaveChangesAsync();

            // Reload the page.
            await RefreshData();
        }
    }

    /// <summary>
    /// Toggles the blocked status of the user.
    /// </summary>
    private async Task ToggleBlockStatus()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        User = await dbContext.AliasVaultUsers.FindAsync(Id);

        if (User != null)
        {
            User.Blocked = !User.Blocked;
            await dbContext.SaveChangesAsync();
            await RefreshData();
        }
    }
}
