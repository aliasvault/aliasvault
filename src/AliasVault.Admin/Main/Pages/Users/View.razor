@page "/users/{Id}"
@inherits MainBase

<LayoutPageTitle>User</LayoutPageTitle>

@if (IsLoading || User == null)
{
    <LoadingIndicator/>
}
else
{
    <div class="grid grid-cols-2 px-4 pt-6 md:grid-cols-3 lg:gap-4 dark:bg-gray-900">
        <div class="mb-4 col-span-full xl:mb-2">
            <Breadcrumb BreadcrumbItems="BreadcrumbItems"/>

            <div class="flex items-center justify-between">
                <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">View user</h1>
                <div class="flex">
                    <a href="/users/@Id/delete" class="mr-2 px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-800">
                        Delete user
                    </a>
                    <RefreshButton OnClick="LoadEntryAsync" ButtonText="Refresh"/>
                </div>
            </div>
        </div>

        <div class="col-span-full">
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center xl:block sm:space-x-4 xl:space-x-0 2xl:space-x-4">
                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">@User.UserName</h3>

                        <div class="mb-4">
                            <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Id</label>
                            <div>@User.Id</div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <span class="text-sm font-medium text-gray-900 dark:text-white">2FA Status:</span>
                            <StatusPill Enabled="@User.TwoFactorEnabled"/>
                            <span>Authenticator key(s) active: @TwoFactorKeysCount</span>
                            @if (User.TwoFactorEnabled)
                            {
                                <button @onclick="DisableTwoFactor" class="px-3 py-2 text-xs font-medium text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
                                    Disable 2FA
                                </button>
                            }
                            else
                            {
                                if (TwoFactorKeysCount > 0)
                                {
                                    <button @onclick="EnableTwoFactor" class="px-3 py-2 text-xs font-medium text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
                                        Enable 2FA
                                    </button>
                                    <button @onclick="ResetTwoFactor" class="px-3 py-2 text-xs font-medium text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
                                        Remove 2FA keys
                                    </button>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center">
                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">UserRefreshTokens (Logged in devices)</h3>

                        <table class="w-full text-sm text-left text-gray-500 shadow rounded border">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                            <tr>
                                <th scope="col" class="px-4 py-3">ID</th>
                                <th scope="col" class="px-4 py-3">Device</th>
                                <th scope="col" class="px-4 py-3">Ip</th>
                                <th scope="col" class="px-4 py-3">Created</th>
                                <th scope="col" class="px-4 py-3">Expires</th>
                                <th scope="col" class="px-4 py-3"></th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var entry in RefreshTokenList)
                            {
                                <tr class="bg-white border-b hover:bg-gray-50">
                                    <td class="px-4 py-3 font-medium text-gray-900">@entry.Id</td>
                                    <td class="px-4 py-3">@entry.DeviceIdentifier</td>
                                    <td class="px-4 py-3">@entry.IpAddress</td>
                                    <td class="px-4 py-3">@entry.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td class="px-4 py-3">@entry.ExpireDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td class="px-4 py-3">
                                        <button @onclick="() => RevokeRefreshToken(entry)" class="px-3 py-2 text-xs font-medium text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">Revoke</button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center">
                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">Vaults</h3>

                        <table class="w-full text-sm text-left text-gray-500 shadow rounded border">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                            <tr>
                                <th scope="col" class="px-4 py-3">ID</th>
                                <th scope="col" class="px-4 py-3">Created</th>
                                <th scope="col" class="px-4 py-3">Updated</th>
                                <th scope="col" class="px-4 py-3">Filesize</th>
                                <th scope="col" class="px-4 py-3">DB version</th>
                                <th scope="col" class="px-4 py-3">Credentials</th>
                                <th scope="col" class="px-4 py-3">Email Claims</th>
                                <th scope="col" class="px-4 py-3">Status</th>
                                <th scope="col" class="px-4 py-3">Actions</th>
                            </tr>
                            </thead>
                            <tbody>
                            @{
                                Vault? previousEntry = null;
                            }
                            @foreach (var entry in VaultList.OrderBy(e => e.UpdatedAt))
                            {
                                <tr class="bg-white border-b hover:bg-gray-50">
                                    <td class="px-4 py-3 font-medium text-gray-900">@entry.Id</td>
                                    <td class="px-4 py-3">@entry.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td class="px-4 py-3">@entry.UpdatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td class="px-4 py-3">@Math.Round((double)entry.FileSize / 1024, 1) MB</td>
                                    <td class="px-4 py-3">@entry.Version</td>
                                    <td class="px-4 py-3">@entry.CredentialsCount</td>
                                    <td class="px-4 py-3">@entry.EmailClaimsCount</td>
                                    <td class="px-4 py-3">
                                        @if (entry == LatestVault)
                                        {
                                            <span class="bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">Current</span>
                                        }
                                        @if (previousEntry != null && HasPasswordChanged(entry, previousEntry))
                                        {
                                            <span class="bg-green-100 text-green-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">Password Changed</span>
                                        }
                                    </td>
                                    <td class="px-4 py-3">
                                        @if (entry != LatestVault)
                                        {
                                            <Button OnClick="() => MakeCurrentAsync(entry)">Make Current</Button>
                                        }
                                    </td>
                                </tr>

                                previousEntry = entry;
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="items-center">
                    <div>
                        <h3 class="mb-1 text-xl font-bold text-gray-900 dark:text-white">Email claims</h3>

                        <table class="w-full text-sm text-left text-gray-500 shadow rounded border">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                            <tr>
                                <th scope="col" class="px-4 py-3">ID</th>
                                <th scope="col" class="px-4 py-3">Created</th>
                                <th scope="col" class="px-4 py-3">Email</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var entry in EmailClaimList)
                            {
                                <tr class="bg-white border-b hover:bg-gray-50">
                                    <td class="px-4 py-3 font-medium text-gray-900">@entry.Id</td>
                                    <td class="px-4 py-3">@entry.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td class="px-4 py-3">@entry.Address</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Gets or sets the user ID.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private bool IsLoading { get; set; } = true;
    private AliasVaultUser? User { get; set; } = new();
    private int TwoFactorKeysCount { get; set; }
    private List<AliasVaultUserRefreshToken> RefreshTokenList { get; set; } = new();
    private List<Vault> VaultList { get; set; } = new();
    private List<UserEmailClaim> EmailClaimList { get; set; } = new();

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Users", Url = "/users" });
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "View user" });
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadEntryAsync();
        }
    }

    private async Task LoadEntryAsync()
    {
        IsLoading = true;
        StateHasChanged();

        // Load the aliases from the webapi via AliasService.
        User = await DbContext.AliasVaultUsers.FindAsync(Id);

        // Get count of user authenticator tokens.
        TwoFactorKeysCount = await DbContext.UserTokens.CountAsync(x => x.UserId == User!.Id && x.Name == "AuthenticatorKey");

        if (User is null)
        {
            // Error loading user.
            GlobalNotificationService.AddErrorMessage("This user does not exist (anymore). Please try again.");
            NavigationService.RedirectTo("/users");
            return;
        }

        // Load all refresh tokens for this user to show which devices are logged in.
        RefreshTokenList = await DbContext.AliasVaultUserRefreshTokens.Where(x => x.UserId == User.Id).Select(x => new AliasVaultUserRefreshToken()
            {
                Id = x.Id,
                DeviceIdentifier = x.DeviceIdentifier,
                IpAddress = x.IpAddress,
                ExpireDate = x.ExpireDate,
                CreatedAt = x.CreatedAt,
            })
            .OrderBy(x => x.CreatedAt)
            .ToListAsync();

        // Load all vaults for this user (do not load the actual file content for performance reasons).
        VaultList = await DbContext.Vaults.Where(x => x.UserId == User.Id).Select(x => new Vault
            {
                Id = x.Id,
                Version = x.Version,
                FileSize = x.FileSize,
                CreatedAt = x.CreatedAt,
                UpdatedAt = x.UpdatedAt,
                Salt = x.Salt,
                Verifier = x.Verifier,
                VaultBlob = string.Empty,
                EncryptionType = x.EncryptionType,
                EncryptionSettings = x.EncryptionSettings,
                CredentialsCount = x.CredentialsCount,
                EmailClaimsCount = x.EmailClaimsCount,
            })
            .OrderBy(x => x.UpdatedAt)
            .ToListAsync();

        // Load all email claims for this user.
        EmailClaimList = await DbContext.UserEmailClaims.Where(x => x.UserId == User.Id)
            .OrderBy(x => x.CreatedAt)
            .ToListAsync();

        IsLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// This method will revoke a refresh token for the user which will log out the device.
    /// </summary>
    private async Task RevokeRefreshToken(AliasVaultUserRefreshToken entry)
    {
        var token = await DbContext.AliasVaultUserRefreshTokens.FindAsync(entry.Id);

        if (token != null)
        {
            DbContext.AliasVaultUserRefreshTokens.Remove(token);
            await DbContext.SaveChangesAsync();
            await LoadEntryAsync();
        }
    }

    /// <summary>
    /// This method enables two-factor authentication for the user based on existing keys. If no keys are present
    /// then 2FA will not work. The user will need to manually set up a new authenticator device.
    /// </summary>
    private async Task EnableTwoFactor()
    {
        User = await DbContext.AliasVaultUsers.FindAsync(Id);

        if (User != null)
        {
            User.TwoFactorEnabled = true;
            await DbContext.SaveChangesAsync();
            await LoadEntryAsync();
        }
    }

    /// <summary>
    /// This method disables two-factor authentication for the user. This will NOT remove the authenticator keys.
    /// This means the admin can re-enable 2FA for the user without the user having to set up a new authenticator
    /// keys.
    /// </summary>
    private async Task DisableTwoFactor()
    {
        User = await DbContext.AliasVaultUsers.FindAsync(Id);

        if (User != null)
        {
            User.TwoFactorEnabled = false;
            await DbContext.SaveChangesAsync();
            await LoadEntryAsync();
        }
    }

    /// <summary>
    /// This method resets the two-factor authentication for the user which will remove all authenticator keys. The
    /// next time the user enables two-factor authentication new keys will be generated. When keys are removed it
    /// also means 2FA cannot be re-enabled until the user manually sets up a new authenticator device.
    /// </summary>
    private async Task ResetTwoFactor()
    {
        User = await DbContext.AliasVaultUsers.FindAsync(Id);

        if (User != null)
        {
            // Remove all authenticator keys and recovery codes.
            await DbContext.UserTokens
                .Where(x => x.UserId == User.Id && (x.Name == "AuthenticatorKey" || x.Name == "RecoveryCodes"))
                .ForEachAsync(x => DbContext.UserTokens.Remove(x));

            await DbContext.SaveChangesAsync();
            await LoadEntryAsync();
        }
    }

    /// <summary>
    /// Determines if the password has changed between two vault entries.
    /// </summary>
    /// <param name="current">The current vault entry.</param>
    /// <param name="previous">The previous vault entry to compare against.</param>
    /// <returns>True if the password has changed, false otherwise.</returns>
    private static bool HasPasswordChanged(Vault current, Vault previous)
    {
        return current.Salt != previous.Salt || current.Verifier != previous.Verifier;
    }

    /// <summary>
    /// Gets the latest vault entry from the list.
    /// </summary>
    private Vault? LatestVault => VaultList.MaxBy(v => v.UpdatedAt);

    /// <summary>
    /// Handles the action of making a vault the current one.
    /// </summary>
    /// <param name="vault">The vault to make current.</param>
    private async Task MakeCurrentAsync(Vault vault)
    {
        if (await ConfirmModalService.ShowConfirmation(
                title: "Confirm Vault Restoration",
                message: $@"Are you sure you want to restore this earlier vault and make it the active one?

Important notes:
• The next time the user logs in, they will load this previous vault version.
• If the user has changed their password recently, it will be reverted to the one stored in this vault.

Do you want to proceed with the restoration?")) {
            // Load vault
            var currentVault = await DbContext.Vaults.FindAsync(vault.Id);

            if (currentVault == null)
            {
                return;
            }

            // Update time to make this the current vault.
            currentVault.UpdatedAt = DateTime.UtcNow;

            // Save it.
            await DbContext.SaveChangesAsync();

            // Reload the page.
            await LoadEntryAsync();
        }
    }
}
