@page "/"
@using AliasVault.Admin.Main.Pages.Dashboard.Components
@inherits MainBase

<LayoutPageTitle>Home</LayoutPageTitle>

<PageHeader
    BreadcrumbItems="@BreadcrumbItems"
    Title="AliasVault Admin"
    Description="Welcome to the AliasVault admin portal. Below you can find statistics about recent email activity and active users.">
    <CustomActions>
        <RefreshButton OnClick="RefreshData" ButtonText="Refresh" />
    </CustomActions>
</PageHeader>

<div class="px-4">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <RegistrationStatisticsCard @ref="_registrationStatisticsCard" />
        <EmailStatisticsCard @ref="_emailStatisticsCard" />
        <ReturningUsersCard @ref="_returningUsersCard" />
        <ActiveUsersCard @ref="_activeUsersCard" />
        <EmailClaimsCard @ref="_emailClaimsCard" />
    </div>
</div>

@code {
    private ActiveUsersCard? _activeUsersCard;
    private ReturningUsersCard? _returningUsersCard;
    private RegistrationStatisticsCard? _registrationStatisticsCard;
    private EmailStatisticsCard? _emailStatisticsCard;
    private EmailClaimsCard? _emailClaimsCard;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Check if 2FA is enabled. If not, show a one-time warning on the dashboard.
        if (!UserService.User().TwoFactorEnabled)
        {
            GlobalNotificationService.AddWarningMessage("Two-factor authentication is not enabled. It is recommended to enable it in Account Settings for better security.", true);
        }
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshData();
        }
    }

    /// <summary>
    /// Refreshes the data displayed on the cards.
    /// </summary>
    private async Task RefreshData()
    {
        if (_activeUsersCard != null &&
            _returningUsersCard != null &&
            _registrationStatisticsCard != null &&
            _emailStatisticsCard != null &&
            _emailClaimsCard != null)
        {
            await Task.WhenAll(
                _activeUsersCard.RefreshData(),
                _returningUsersCard.RefreshData(),
                _registrationStatisticsCard.RefreshData(),
                _emailStatisticsCard.RefreshData(),
                _emailClaimsCard.RefreshData()
            );
        }
    }
}
