@inherits ComponentBase
@inject TotpCodeService TotpCodeService
@inject GlobalNotificationService GlobalNotificationService
@implements IDisposable

<div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
    <div class="flex justify-between">
        <div>
            <h3 class="mb-4 text-xl font-semibold dark:text-white">Two-Factor Authentication</h3>
        </div>
        @if (TotpCodeList.Count > 0)
        {
            <div>
                <button @onclick="ShowAddTotpCodeModal" type="button" class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-3 py-2 text-center dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800">
                    Add TOTP Code
                </button>
            </div>
        }
    </div>

    @if (IsLoading)
    {
        <LoadingIndicator />
    }
    else if (TotpCodeList.Count == 0)
    {
        <div class="flex flex-col justify-center">
            <p class="mb-4 text-gray-500 dark:text-gray-400">No 2FA TOTP codes added yet.</p>
            <button @onclick="ShowAddTotpCodeModal" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                Add 2FA TOTP Code
            </button>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            @foreach (var totpCode in TotpCodeList)
            {
                <div class="p-4 bg-gray-50 border border-gray-200 rounded-lg dark:bg-gray-700 dark:border-gray-600">
                    <div class="flex justify-between items-center mb-2">
                        <h4 class="text-lg font-medium text-gray-900 dark:text-white">@totpCode.Name</h4>
                        <button @onclick="() => DeleteTotpCode(totpCode.Id)" class="text-red-600 hover:text-red-800 dark:text-red-500 dark:hover:text-red-400">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </div>
                    <div class="flex flex-col items-center">
                        <div class="text-3xl font-bold text-gray-900 dark:text-white mb-2">@GetTotpCode(totpCode.SecretKey)</div>
                        <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mb-2">
                            <div class="bg-blue-600 h-2.5 rounded-full" style="width: @(GetRemainingPercentage())%"></div>
                        </div>
                        <div class="text-sm text-gray-500 dark:text-gray-400">Refreshes in @GetRemainingSeconds() seconds</div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (IsAddTotpCodeModalVisible)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
        <div class="relative p-4 w-full max-w-md max-h-full">
            <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                        Add 2FA TOTP Code
                    </h3>
                    <button @onclick="HideAddTotpCodeModal" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
                        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                        </svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>
                <div class="p-4 md:p-5">
                    <div class="mb-4">
                        <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Name</label>
                        <input type="text" id="name" @bind="NewTotpCode.Name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="Service Name" required>
                    </div>
                    <div class="mb-4">
                        <label for="secretKey" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Secret Key (32 characters)</label>
                        <input type="text" id="secretKey" @bind="NewTotpCode.SecretKey" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="JBSWY3DPEHPK3PXP" required>
                        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Enter the secret key provided by the service.</p>
                    </div>
                    <button @onclick="AddTotpCode" class="w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// The credential ID.
    /// </summary>
    [Parameter]
    public Guid CredentialId { get; set; }

    /// <summary>
    /// The service name.
    /// </summary>
    [Parameter]
    public string ServiceName { get; set; } = string.Empty;

    private List<TotpCode> TotpCodeList { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool IsAddTotpCodeModalVisible { get; set; } = false;
    private TotpCode NewTotpCode { get; set; } = new();
    private Timer? _refreshTimer;
    private Dictionary<string, string> _currentCodes = new();

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadTotpCodesAsync();

        // Start a timer to refresh the TOTP codes every second
        _refreshTimer = new Timer(async _ => await RefreshCodesAsync(), null, 0, 1000);
    }

    private async Task LoadTotpCodesAsync()
    {
        IsLoading = true;
        StateHasChanged();

        TotpCodeList = await TotpCodeService.GetTotpCodesAsync(CredentialId);

        // Generate initial codes
        foreach (var code in TotpCodeList)
        {
            _currentCodes[code.SecretKey] = TotpCodeService.GenerateTotpCode(code.SecretKey);
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task RefreshCodesAsync()
    {
        bool hasChanges = false;

        foreach (var code in TotpCodeList)
        {
            var newCode = TotpCodeService.GenerateTotpCode(code.SecretKey);
            if (!_currentCodes.ContainsKey(code.SecretKey) || _currentCodes[code.SecretKey] != newCode)
            {
                _currentCodes[code.SecretKey] = newCode;
                hasChanges = true;
            }
        }

        if (hasChanges)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetTotpCode(string secretKey)
    {
        if (_currentCodes.TryGetValue(secretKey, out var code))
        {
            return code;
        }

        var newCode = TotpCodeService.GenerateTotpCode(secretKey);
        _currentCodes[secretKey] = newCode;
        return newCode;
    }

    private int GetRemainingSeconds()
    {
        return TotpCodeService.GetRemainingSeconds();
    }

    private int GetRemainingPercentage()
    {
        var remaining = GetRemainingSeconds();
        return (int)((remaining / 30.0) * 100);
    }

    private void ShowAddTotpCodeModal()
    {
        NewTotpCode = new TotpCode
        {
            CredentialId = CredentialId,
            Name = ServiceName
        };
        IsAddTotpCodeModalVisible = true;
    }

    private void HideAddTotpCodeModal()
    {
        IsAddTotpCodeModalVisible = false;
    }

    private async Task AddTotpCode()
    {
        if (string.IsNullOrWhiteSpace(NewTotpCode.Name))
        {
            GlobalNotificationService.AddErrorMessage("Name is required.", true);
            return;
        }

        if (string.IsNullOrWhiteSpace(NewTotpCode.SecretKey))
        {
            GlobalNotificationService.AddErrorMessage("Secret key is required.", true);
            return;
        }

        try
        {
            // Validate the secret key by trying to generate a code
            TotpCodeService.GenerateTotpCode(NewTotpCode.SecretKey);
        }
        catch (Exception)
        {
            GlobalNotificationService.AddErrorMessage("Invalid secret key. Please check and try again.", true);
            return;
        }

        var result = await TotpCodeService.AddTotpCodeAsync(NewTotpCode);
        if (result != null)
        {
            GlobalNotificationService.AddSuccessMessage("TOTP code added successfully.", true);
            HideAddTotpCodeModal();
            await LoadTotpCodesAsync();
        }
        else
        {
            GlobalNotificationService.AddErrorMessage("Failed to add TOTP code. Please try again.", true);
        }
    }

    private async Task DeleteTotpCode(Guid totpCodeId)
    {
        var result = await TotpCodeService.DeleteTotpCodeAsync(totpCodeId);
        if (result)
        {
            GlobalNotificationService.AddSuccessMessage("TOTP code deleted successfully.", true);
            await LoadTotpCodesAsync();
        }
        else
        {
            GlobalNotificationService.AddErrorMessage("Failed to delete TOTP code. Please try again.", true);
        }
    }

    /// <inheritdoc/>
    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}
