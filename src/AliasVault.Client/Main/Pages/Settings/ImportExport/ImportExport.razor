@page "/settings/import-export"
@inherits MainBase
@inject CredentialService CredentialService
@inject ILogger<ImportExport> Logger
@inject ConfirmModalService ConfirmModalService
@using AliasVault.RazorComponents.Services
@using AliasVault.Client.Main.Pages.Settings.ImportExport.Components
@using AliasVault.ImportExport

<LayoutPageTitle>Import / Export</LayoutPageTitle>

<PageHeader
    BreadcrumbItems="@BreadcrumbItems"
    Title="Import / Export"
    Description="On this page you can import and export your vault.">
</PageHeader>

<div class="p-4 mx-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
    <h3 class="mb-4 text-xl font-semibold dark:text-white">Import vault</h3>
    <div class="mb-4 text-sm text-gray-500 dark:text-gray-400">
        Select a service to import from. If you are using a service that is not listed here and would like to see it supported, please raise an issue on <a href="https://github.com/lanedirt/AliasVault/issues" target="_blank" class="text-primary-500 hover:text-primary-700">GitHub</a> or contact us.
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <ImportServiceBitwarden />
        <ImportServiceKeePass />
        <ImportService1Password />
        <ImportServiceChrome />
        <ImportServiceAliasVault />
    </div>
</div>

<div class="p-4 mx-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
    <h3 class="mb-4 text-xl font-semibold dark:text-white">Export vault</h3>
    <div class="mb-4">
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
            If you want to export your AliasVault credentials to another AliasVault instance (e.g. from cloud to self-hosted or vice-versa) or to another service altogether, you can export it here. Note that all exports are unencrypted so store it in a safe place and delete it when you no longer need it.
        </p>
        <div>
            <Button OnClick="@(() => ShowExportConfirmation(ExportType.Csv))">Export vault to unencrypted CSV file</Button>
        </div>
        <div class="mt-6">
            <Button OnClick="@(() => ShowExportConfirmation(ExportType.Sqlite))">Export vault to unencrypted SQLite file</Button>
        </div>
    </div>
</div>

@code {
    private ExportType _currentExportType;

    private enum ExportType
    {
        Csv,
        Sqlite
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Import / Export" });
    }

    private async Task ShowExportConfirmation(ExportType exportType)
    {
        _currentExportType = exportType;
        var confirmMessage = @"Warning: Exporting your vault to an unencrypted file will expose all of your passwords and sensitive information in plain text. Only do this on trusted computers and ensure you:

• Store the exported file in a secure location
• Delete the file when you no longer need it
• Never share the exported file with others

Are you sure you want to continue with the export?";

        var result = await ConfirmModalService.ShowConfirmation("Export vault", confirmMessage);
        if (!result)
        {
            return;
        }

        await HandleExportConfirmed();
    }

    private async Task HandleExportConfirmed()
    {
        switch (_currentExportType)
        {
            case ExportType.Csv:
                await ExportVaultCsv();
                break;
            case ExportType.Sqlite:
                await ExportVaultSqlite();
                break;
        }
    }

    private async Task ExportVaultSqlite()
    {
        try
        {
            // Decode the base64 string to a byte array.
            byte[] fileBytes = Convert.FromBase64String(await DbService.ExportSqliteToBase64Async());

            // Create a memory stream from the byte array.
            using (MemoryStream memoryStream = new MemoryStream(fileBytes))
            {
                // Invoke JavaScript to initiate the download.
                await JsInteropService.DownloadFileFromStream($"{await GetExportFileName("sqlite")}", memoryStream.ToArray());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading file");
        }
    }

    private async Task ExportVaultCsv()
    {
        try
        {
            var credentials = await CredentialService.LoadAllAsync();

            var csvBytes = CredentialCsvService.ExportCredentialsToCsv(credentials);

            // Create a memory stream from the byte array.
            using (MemoryStream memoryStream = new MemoryStream(csvBytes))
            {
                // Invoke JavaScript to initiate the download with date and username in filename
                await JsInteropService.DownloadFileFromStream($"{await GetExportFileName("csv")}", memoryStream.ToArray());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading file");
        }
    }

    private async Task<string> GetExportFileName(string extension)
    {
        var dateStr = DateTime.UtcNow.ToString("yyyy-MM-dd");
        var username = await GetUsernameAsync();
        return $"aliasvault-export-{username}-{dateStr}.{extension}";
    }
}
