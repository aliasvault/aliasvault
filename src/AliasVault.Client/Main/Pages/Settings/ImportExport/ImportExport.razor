@page "/settings/import-export"
@inherits MainBase
@inject CredentialService CredentialService
@inject ILogger<ImportExport> Logger
@using AliasVault.Client.Main.Pages.Settings.ImportExport.Components
@using AliasVault.ImportExport

<LayoutPageTitle>Import / Export</LayoutPageTitle>

<PageHeader
    BreadcrumbItems="@BreadcrumbItems"
    Title="Import / Export"
    Description="On this page you can import and export your vault.">
</PageHeader>

<div class="p-4 mx-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
    <h3 class="mb-4 text-xl font-semibold dark:text-white">Import vault</h3>
    <div class="mb-4 text-sm text-gray-500 dark:text-gray-400">
        Select a service to import from. If you are using a service that is not listed here, you can import from a CSV file manually. Or if you believe we are missing a popular service, please contact us and let us know.
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <ImportServiceBitwarden />
        <ImportServiceKeePass />
        <ImportServiceAliasVault />
    </div>
</div>

<div class="p-4 mx-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm 2xl:col-span-2 dark:border-gray-700 sm:p-6 dark:bg-gray-800">
    <h3 class="mb-4 text-xl font-semibold dark:text-white">Export vault</h3>
    <div class="mb-4">
        <div class="p-4 mb-4 text-sm text-yellow-800 rounded-lg bg-yellow-50 dark:bg-yellow-900 dark:text-yellow-100">
            <p><strong>Warning:</strong> Exporting your vault to an unencrypted file will expose all of your passwords and sensitive information in plain text. Only do this on trusted computers and ensure you:</p>
            <ul class="list-disc ml-6 mt-2">
                <li>Store the exported file in a secure location</li>
                <li>Delete the file when you no longer need it</li>
                <li>Never share the exported file with others</li>
            </ul>
        </div>
        <div>
            <Button OnClick="ExportVaultSqlite">Export vault to unencrypted SQLite file</Button>
        </div>
        <div class="mt-6">
            <Button OnClick="ExportVaultCsv">Export vault to unencrypted CSV file</Button>
        </div>
    </div>
</div>

@code {
    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbItems.Add(new BreadcrumbItem { DisplayName = "Import / Export" });
    }

    private async Task ExportVaultSqlite()
    {
        try
        {
            // Decode the base64 string to a byte array.
            byte[] fileBytes = Convert.FromBase64String(await DbService.ExportSqliteToBase64Async());

            // Create a memory stream from the byte array.
            using (MemoryStream memoryStream = new MemoryStream(fileBytes))
            {
                // Invoke JavaScript to initiate the download.
                await JsInteropService.DownloadFileFromStream("aliasvault-client.sqlite", memoryStream.ToArray());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading file");
        }
    }

    private async Task ExportVaultCsv()
    {
        try
        {
            var credentials = await CredentialService.LoadAllAsync();

            var csvBytes = CredentialCsvService.ExportCredentialsToCsv(credentials);

            // Create a memory stream from the byte array.
            using (MemoryStream memoryStream = new MemoryStream(csvBytes))
            {
                // Invoke JavaScript to initiate the download.
                await JsInteropService.DownloadFileFromStream("aliasvault-client.csv", memoryStream.ToArray());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading file");
        }
    }
}
