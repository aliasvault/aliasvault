@inject ILogger<ImportServiceCard> Logger
@inject IJSRuntime JSRuntime
@inject CredentialService CredentialService
@inject DbService DbService
@using AliasVault.ImportExport.Importers
@using AliasVault.ImportExport.Models

<div class="flex flex-col p-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
    <div class="flex items-center mb-3">
        <div class="w-12 h-12 mr-3 flex-shrink-0">
            @if (!string.IsNullOrEmpty(LogoUrl))
            {
                <img src="@LogoUrl" alt="@ServiceName logo" class="w-full h-full object-contain" />
            }
            else
            {
                <div class="w-full h-full bg-gray-200 dark:bg-gray-700 rounded-md flex items-center justify-center">
                    <span class="text-gray-500 dark:text-gray-400 text-xs">No logo</span>
                </div>
            }
        </div>
        <div>
            <h4 class="text-lg font-semibold dark:text-white">@ServiceName</h4>
            @if (!string.IsNullOrEmpty(Description))
            {
                <p class="text-sm text-gray-500 dark:text-gray-400">@Description</p>
            }
        </div>
    </div>
    <div class="mt-auto">
        <Button OnClick="@OpenImportModal">Import from @ServiceName</Button>
    </div>
</div>

@if (IsModalOpen)
{
    <ClickOutsideHandler OnClose="CloseModal" ContentId="importServiceModal">
        <ModalWrapper OnEnter="HandleModalConfirm">
            <div id="importServiceModal" class="relative top-20 mx-auto p-5 shadow-lg rounded-md bg-white dark:bg-gray-800 border-2 border-gray-300 dark:border-gray-400">
                <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-lg w-full mx-auto">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-xl font-semibold dark:text-white">Import from @ServiceName</h3>
                        <button @onclick="CloseModal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                    @ChildContent

                    <div class="flex justify-end mt-6 space-x-2">
                        <Button OnClick="@CloseModal" Color="secondary">Cancel</Button>
                        <Button OnClick="@HandleModalConfirm" Color="primary">Import</Button>
                    </div>
                </div>
            </div>
        </ModalWrapper>
    </ClickOutsideHandler>
}

@code {
    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string ServiceName { get; set; } = string.Empty;

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string LogoUrl { get; set; } = string.Empty;

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public EventCallback OnImportComplete { get; set; }

    private bool IsModalOpen { get; set; } = false;
    private bool IsImporting { get; set; } = false;
    private string? ImportErrorMessage { get; set; }
    private string? ImportSuccessMessage { get; set; }

    /// <summary>
    /// Child content which is shown in the modal popup. This can contain custom instructions.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    /// <summary>
    /// The imported credentials.
    /// </summary>
    private List<ImportedCredential> ImportedCredentials { get; set; } = new();

    /// <summary>
    /// Sets the imported credentials.
    /// </summary>
    /// <param name="importedCredentials">The imported credentials.</param>
    public void SetImportedCredentials(List<ImportedCredential> importedCredentials)
    {
        ImportedCredentials = importedCredentials;
    }

    /// <summary>
    ///
    /// </summary>
    protected virtual void OpenImportModal()
    {
        IsModalOpen = true;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    protected virtual void CloseModal()
    {
        IsModalOpen = false;
        ImportErrorMessage = null;
        ImportSuccessMessage = null;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    protected virtual async Task HandleModalConfirm()
    {
        if (IsImporting)
        {
            return;
        }

        IsImporting = true;
        ImportErrorMessage = null;
        ImportSuccessMessage = null;
        StateHasChanged();

        try
        {
            // Convert imported credentials to AliasVault format and insert them to the database.
            var credentials = BaseImporter.ConvertToCredential(ImportedCredentials);
            foreach (var credential in credentials)
            {
                await CredentialService.InsertEntryAsync(credential, false, false);
            }

            // Save the database
            var success = await DbService.SaveDatabaseAsync();
            if (success)
            {
                ImportSuccessMessage = $"Successfully imported {ImportedCredentials.Count} credentials.";
            }
            else
            {
                ImportErrorMessage = "Error saving database.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error importing credentials");
            ImportErrorMessage = $"Error importing credentials: {ex.Message}";
        }
        finally
        {
            IsImporting = false;
            StateHasChanged();
        }

        await OnImportComplete.InvokeAsync();
        CloseModal();
    }
}
