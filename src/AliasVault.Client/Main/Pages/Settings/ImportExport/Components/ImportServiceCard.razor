@inject ILogger<ImportServiceCard> Logger
@inject IJSRuntime JSRuntime
@inject CredentialService CredentialService
@inject DbService DbService
@inject NavigationManager NavigationManager
@using AliasVault.ImportExport.Importers
@using AliasVault.ImportExport.Models

<div class="flex flex-col p-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
    <div class="flex items-center mb-3">
        <div class="w-12 h-12 mr-3 flex-shrink-0">
            @if (!string.IsNullOrEmpty(LogoUrl))
            {
                <img src="@LogoUrl" alt="@ServiceName logo" class="w-full h-full object-contain" />
            }
            else
            {
                <div class="w-full h-full bg-gray-200 dark:bg-gray-700 rounded-md flex items-center justify-center">
                    <span class="text-gray-500 dark:text-gray-400 text-xs">No logo</span>
                </div>
            }
        </div>
        <div>
            <h4 class="text-lg font-semibold dark:text-white">@ServiceName</h4>
            @if (!string.IsNullOrEmpty(Description))
            {
                <p class="text-sm text-gray-500 dark:text-gray-400">@Description</p>
            }
        </div>
    </div>
    <div class="mt-auto">
        <Button OnClick="@OpenImportModal">Import from @ServiceName</Button>
    </div>
</div>

@if (IsModalOpen)
{
    <ClickOutsideHandler OnClose="CloseModal" ContentId="importServiceModal">
        <ModalWrapper OnEnter="HandleModalConfirm">
            <div id="importServiceModal" class="relative top-20 mx-auto p-5 shadow-lg rounded-md bg-white dark:bg-gray-800 border-2 border-gray-300 dark:border-gray-400">
                <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-lg w-full mx-auto">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-xl font-semibold dark:text-white">Import from @ServiceName</h3>
                        <button @onclick="CloseModal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    @switch (CurrentStep)
                    {
                        case ImportStep.FileUpload:
                            @if (!string.IsNullOrEmpty(ImportError))
                            {
                                <div class="mb-4 p-4 text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800" role="alert">
                                    @ImportError
                                </div>
                            }

                            @if (IsImporting)
                            {
                                <LoadingIndicator />
                            }

                            <div class="@(IsImporting ? "hidden" : "")">
                                <div class="mb-4">
                                    <p class="mb-4 text-gray-700 dark:text-gray-300">Upload your @ServiceName export file:</p>
                                    <InputFile OnChange="HandleFileUpload" class="text-gray-700 dark:text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 dark:file:bg-gray-700 dark:file:text-gray-300 dark:hover:file:bg-gray-600" />
                                </div>
                                <div class="flex justify-end mt-6 space-x-2">
                                    <Button OnClick="@CloseModal" Color="secondary">Cancel</Button>
                                </div>
                            </div>
                            break;

                        case ImportStep.Preview:
                            <div class="mb-4">
                                <p class="mb-4 text-gray-700 dark:text-gray-300">Check if the following detected credentials look correct before continuing:</p>
                                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                    <thead class="bg-gray-50 dark:bg-gray-700">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Service</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Username</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Password</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                        @foreach (var credential in ImportedCredentials.Take(3))
                                        {
                                            <tr>
                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">@credential.ServiceName</td>
                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">@credential.Username</td>
                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">@(new string('*', credential.Password?.Length ?? 0))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                @if (ImportedCredentials.Count > 3)
                                {
                                    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">... and @(ImportedCredentials.Count - 3) more credentials</p>
                                }
                            </div>
                            <div class="flex justify-end mt-6 space-x-2">
                                <Button OnClick="@HandlePreviousStep" Color="secondary">Back</Button>
                                <Button OnClick="@HandleNextStep" Color="primary">Next</Button>
                            </div>
                            break;

                        case ImportStep.Confirm:
                            @if (IsImporting)
                            {
                                <LoadingIndicator />
                            }
                            else {
                                <div class="mb-4">
                                    <p class="mb-4 text-gray-700 dark:text-gray-300">Are you sure you want to import (@ImportedCredentials.Count) credentials? Note: the import process can take a short while.</p>
                                </div>
                                <div class="flex justify-end mt-6 space-x-2">
                                    <Button OnClick="@HandlePreviousStep" Color="secondary">Back</Button>
                                    <Button OnClick="@HandleModalConfirm" Color="primary">Import</Button>
                                </div>
                            }
                            break;
                    }
                </div>
            </div>
        </ModalWrapper>
    </ClickOutsideHandler>
}

@code {
    private enum ImportStep
    {
        FileUpload,
        Preview,
        Confirm
    }

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string ServiceName { get; set; } = string.Empty;

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string LogoUrl { get; set; } = string.Empty;

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public EventCallback OnImportComplete { get; set; }

    [Parameter]
    public EventCallback OnImportConfirmed { get; set; }

    [Parameter]
    public Func<string, Task<List<ImportedCredential>>> ProcessFileCallback { get; set; } = default!;

    private bool IsModalOpen { get; set; } = false;
    private bool IsImporting { get; set; } = false;
    private string? ImportError { get; set; }
    private string? ImportSuccessMessage { get; set; }
    private ImportStep CurrentStep { get; set; } = ImportStep.FileUpload;

    /// <summary>
    /// Child content which is shown in the modal popup. This can contain custom instructions.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    /// <summary>
    /// The imported credentials.
    /// </summary>
    private List<ImportedCredential> ImportedCredentials { get; set; } = new();

    /// <summary>
    /// Sets the imported credentials and continues to the preview step.
    /// </summary>
    /// <param name="importedCredentials">The imported credentials.</param>
    public async Task SetImportedCredentials(List<ImportedCredential> importedCredentials)
    {
        ImportedCredentials = importedCredentials;

        // Continue to step 2.
        await HandleNextStep();
    }

    /// <summary>
    /// Called when a file is selected in the parent file upload step.
    /// </summary>
    public async Task FileSelected()
    {
        // If the file is selected, we can go to the preview step.
        await HandleNextStep();
    }

    /// <summary>
    ///
    /// </summary>
    protected virtual void OpenImportModal()
    {
        IsModalOpen = true;
        CurrentStep = ImportStep.FileUpload;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    protected virtual void CloseModal()
    {
        IsModalOpen = false;
        CurrentStep = ImportStep.FileUpload;
        ImportError = null;
        ImportSuccessMessage = null;
        ImportedCredentials.Clear();
        StateHasChanged();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        Logger.LogInformation($"File selected: {e.File.Name}");

        if (e.File == null || string.IsNullOrEmpty(e.File.Name))
        {
            ImportError = $"Please select a valid {ServiceName} export file to import";
            return;
        }

        try
        {
            IsImporting = true;
            StateHasChanged();

            // Add file size validation
            if (e.File.Size > 10 * 1024 * 1024) // 10MB limit
            {
                throw new Exception("File size exceeds 10MB limit");
            }

            // Create a new memory stream to hold the file data
            using var stream = e.File.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var reader = new StreamReader(stream);
            var fileContents = await reader.ReadToEndAsync();

            var processingTask = ProcessFileCallback(fileContents);
            var delayTask = Task.Delay(500);

            await Task.WhenAll(processingTask, delayTask);

            ImportedCredentials = await processingTask;
            CurrentStep = ImportStep.Preview;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error processing {ServiceName} export file");
            ImportError = $"Error processing {ServiceName} export file. Please check the file format and try again.";
        }
        finally
        {
            IsImporting = false;
            StateHasChanged();
        }
    }

    protected virtual async Task HandleNextStep()
    {
        if (CurrentStep == ImportStep.Preview)
        {
            CurrentStep = ImportStep.Confirm;
        }
        else if (CurrentStep == ImportStep.Confirm)
        {
            await HandleModalConfirm();
        }
    }

    protected virtual void HandlePreviousStep()
    {
        if (CurrentStep == ImportStep.Preview)
        {
            CurrentStep = ImportStep.FileUpload;
        }
        else if (CurrentStep == ImportStep.Confirm)
        {
            CurrentStep = ImportStep.Preview;
        }
    }

    /// <summary>
    ///
    /// </summary>
    protected virtual async Task HandleModalConfirm()
    {
        if (IsImporting)
        {
            return;
        }

        IsImporting = true;
        ImportError = null;
        ImportSuccessMessage = null;
        StateHasChanged();

        try
        {
            // Convert imported credentials to AliasVault format and insert them to the database.
            var credentials = BaseImporter.ConvertToCredential(ImportedCredentials);
            foreach (var credential in credentials)
            {
                await CredentialService.InsertEntryAsync(credential, false, false);
            }

            // Save the database
            var success = await DbService.SaveDatabaseAsync();
            if (success)
            {
                ImportSuccessMessage = $"Successfully imported {ImportedCredentials.Count} credentials.";
                await OnImportComplete.InvokeAsync();
                NavigationManager.NavigateTo("/credentials");
            }
            else
            {
                ImportError = "Error saving database.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error importing credentials");
            ImportError = $"Error importing credentials: {ex.Message}";
        }
        finally
        {
            IsImporting = false;
            StateHasChanged();
        }
    }
}
