@page "/unlock"
@inherits AliasVault.Client.Auth.Pages.Base.LoginBase
@layout Auth.Layout.MainLayout
@using System.Text.Json
@using AliasVault.Client.Auth.Components
@using AliasVault.Client.Utilities
@using AliasVault.Shared.Models.WebApi.Auth
@using Cryptography.Client

<div class="flex space-x-4">
    <img class="w-8 h-8 rounded-full" src="/img/avatar.webp" alt="Bonnie image">
    <h2 class="mb-3 text-2xl font-bold text-gray-900 dark:text-white">@Email</h2>
</div>

<p class="text-base font-normal text-gray-500 dark:text-gray-400">
    Enter your master password in order to unlock your database.
</p>

<FullScreenLoadingIndicator @ref="LoadingIndicator" />
<ServerValidationErrors @ref="ServerValidationErrors" />

<EditForm Model="UnlockModel" OnValidSubmit="HandleLogin" class="mt-8 space-y-6">
    <DataAnnotationsValidator/>
    <div>
        <label asp-for="Input.Password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your password</label>
        <InputTextField id="password" @bind-Value="UnlockModel.Password" type="password" placeholder="••••••••" />
        <ValidationMessage For="() => UnlockModel.Password"/>
    </div>

    <button type="submit" class="inline-flex items-center justify-center w-full px-5 py-3 text-base font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
        <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a5 5 0 00-5 5v2a2 2 0 00-2 2v5a2 2 0 002 2h10a2 2 0 002-2v-5a2 2 0 00-2-2H7V7a3 3 0 015.905-.75 1 1 0 001.937-.5A5.002 5.002 0 0010 2z"></path></svg>
        Unlock
    </button>

    <div class="text-sm font-medium text-gray-500 dark:text-gray-400">
        Switch accounts? <a href="/user/logout" class="text-primary-700 hover:underline dark:text-primary-500">Log out</a>
    </div>
</EditForm>

@code {
    private string? Email { get; set; }
    private readonly UnlockModel UnlockModel = new();
    private FullScreenLoadingIndicator LoadingIndicator = new();
    private ServerValidationErrors ServerValidationErrors = new();

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await AuthStateProvider.GetAuthenticationStateAsync();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == false) {
            // Not authenticated (anymore), redirect to login page.
            NavigationManager.NavigateTo("/user/login");
        }

        var email = authState.User.Identity?.Name;
        if (email is null)
        {
            // Clear all tokens and redirect to login page.
            await AuthService.RemoveTokensAsync();
            await AuthStateProvider.GetAuthenticationStateAsync();
            GlobalNotificationService.ClearMessages();
            NavigationManager.NavigateTo("/user/login");
        }

        Email = email;
    }

    private async Task HandleLogin()
    {
        if (Email == null)
        {
            return;
        }

        LoadingIndicator.Show();
        ServerValidationErrors.Clear();

        try
        {
            // Send request to server with email to get user salt.
            var result = await Http.PostAsJsonAsync("api/v1/Auth/login", new LoginInitiateRequest(Email));
            var responseContent = await result.Content.ReadAsStringAsync();

            if (!result.IsSuccessStatusCode)
            {
                var errors = ApiResponseUtility.ParseErrorResponse(responseContent);
                foreach (var error in errors)
                {
                    ServerValidationErrors.AddError(error);
                }
                return;
            }

            var loginResponse = JsonSerializer.Deserialize<LoginInitiateResponse>(responseContent);
            if (loginResponse == null)
            {
                ServerValidationErrors.AddError("An error occurred while processing the unlock request.");
            }

            // 3. Client derives shared session key.
            byte[] passwordHash = await Encryption.DeriveKeyFromPasswordAsync(UnlockModel.Password, loginResponse!.Salt);

            // Check if the password is correct locally by decrypting the test string.
            var validPassword = await AuthService.ValidateEncryptionKeyAsync(passwordHash);

            if (!validPassword)
            {
                ServerValidationErrors.AddError("The password is incorrect. Please try entering your password again, or log out and log in again.");
                return;
            }

            // Store the encryption key in memory.
            await AuthService.StoreEncryptionKeyAsync(passwordHash);


            // Redirect to the page the user was trying to access before if set.
            var localStorageReturnUrl = await LocalStorage.GetItemAsync<string>("returnUrl");
            if (!string.IsNullOrEmpty(localStorageReturnUrl))
            {
                NavigationManager.NavigateTo(localStorageReturnUrl);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
#if DEBUG
        catch (Exception ex)
        {
            // If in debug mode show the actual exception.
            ServerValidationErrors.AddError(ex.ToString());
        }
#else
        catch
        {
            // If in release mode show a generic error.
            ServerValidationErrors.AddError("An error occurred while processing the login request. Try again (later).");
        }
#endif
        finally
        {
            LoadingIndicator.Hide();
        }
    }
}
